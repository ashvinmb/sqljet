#summary Supported database options.
#labels Phase-Design,Featured

= Introduction =
SQLite defines a pragma statement to query database options and alter its behaviour. Full description is available at http://www.sqlite.org/pragma.html page. SQLJet supports a subset of these options via typed and statement APIs.

= Details =
Typed API can be accessed using `SqlJetDb.getOptions()`. It returns an ISqlJetOptions implementation that has methods to query and alter individual options that correspond to SQLite pragmas.

Method `SqlJetDb.pragma(String)` allows to execute individual pragma statements and is fully compatible with SQLite syntax. Internally this method delegates to the typed API.

Currently supported pragmas include:
 * auto_vacuum
 * cache_size
 * encoding
 * schema_version
 * user_version

There is one important thing: some pragmas can be changed only in new empty database and only without active transaction. Other pragmas contrariwise should be called in active transaction.

Pragmas which allowed changed only in new empty database and without transaction are:
 * auto_vacuum
 * encoding

This restriction is related with file format and changes of this pragmas in non empty database could damage database. And changes of this pragmas must be immediately committed to database (it performs automatically), therefore it should be never called in active transaction because this active transaction will be committed unwittingly (and other backside effects is possible).

Other pragmas haven't these restrictions and should be called in active transaction. These pragmas are:
 * cache_size
 * schema_version
 * user_version