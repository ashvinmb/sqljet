#summary Sample application that shows how to use SqlJet.

= Introduction =

'Spending' is a simple application to manage personal expenses. It's based on a list of payments that user can browse and modify. All payments are stored in 'spending.db' database, in the 'payments' table.

= Schema =

Each payment is composed of the following attributes:
 - *date* Date when money were spent or received.
 - *amount* Amount of received money; if this number is negative then money were spent.
 - *currency* Payment currency; three letters.
 - *info* What was bought or where the money came from.

Class 'Payment' represents a payment and has method 'read()' to extract payment attributes from a database cursor:

{{{
public class Payment {

	public Date date;
	public long amount;
	public String currency, info;

	public Payment() {
	}

	public Payment(Date date, long amount, String currency, String info) {
		this.date = date;
		this.amount = amount;
		this.currency = currency;
		this.info = info;
	}

	public void read(ISqlJetCursor cursor) throws SqlJetException {
		date = readDate(cursor);
		amount = cursor.getInteger("amount");
		currency = cursor.getString("currency");
		info = cursor.getString("info");
	}

	private Date readDate(ISqlJetCursor cursor) throws SqlJetException {
		String value = cursor.getString("date");
		try {
			return SpendingDB.getDateFormat().parse(value);
		} catch (ParseException pe) {
			return null;
		}
	}
}
}}}

Table 'payments' keeps these records. Class 'SpendingDB' encapsulates connection to the 'spending.db' file. Call 'open()' to establish connection when application is launched and 'close()' before exit.