#summary More complicated tutorial using Inventory application.
#labels Tutorial

= Introduction =

Inventory is a simple warehouse management application. It keeps a list of items and their locations (room + shelf).

You can access the source code here: http://svn.sqljet.com/repos/sqljet/trunk/sqljet-examples/inventory/

Application runs as a web server so you can connect to it using any web browser. Server is multithreaded and each request is processed in its own worker thread. Each thread opens a connection to the inventory.db database if necessary so there may be several connections open at the same time.

There are two versions of the application: the first one allows to edit a list of items and the second one adds a list of users that may borrow items. You may change the version using InventoryDB.VERSION constant. When connection to the database is opened InventoryDB checks the current version and upgrades the schema if necessary.

= UI Version 1 =

Initially a list of items is displayed:

http://sqljet.googlecode.com/svn/trunk/images/inventory/Inventory1.png

The link 'Add Item' below the items list allows to add a new item:

http://sqljet.googlecode.com/svn/trunk/images/inventory/Inventory2.png

Form values are sent to server in query string for simplicity:

http://sqljet.googlecode.com/svn/trunk/images/inventory/Inventory3.png

Links 'Edit' and 'Remove' allow to edit and delete a particular item:

http://sqljet.googlecode.com/svn/trunk/images/inventory/Inventory5.png

All requests are logged to console. You may stop the server by typing any text and pressing 'Return'. Here is the log of the above session:

<pre>
Inventory is listening at http://127.0.0.1:8333
Enter any text to shutdown.
GET / HTTP/1.1
GET /add_item HTTP/1.1
GET /add_item?name=Dictionary&description=The+big+one&room=3&shelf=55 HTTP/1.1
GET / HTTP/1.1
GET /edit_item?article=3 HTTP/1.1
GET /edit_item?name=Cup&description=My+best&room=3&shelf=1&article=3 HTTP/1.1
GET / HTTP/1.1
GET /remove_item?article=3 HTTP/1.1
GET / HTTP/1.1

Exit.
</pre>

= Schema Version 1 =

Class InventoryDB encapsulates connection to the database and provides convenient accessor methods:

{{{
public class InventoryDB {

	public static final int VERSION = 1;

	private static final String FILE_NAME = "inventory.db";

	private SqlJetDb db;

	public InventoryDB() throws SqlJetException {
		db = SqlJetDb.open(new File(FILE_NAME), true);
		upgrade(VERSION);
	}

	public void close() throws SqlJetException {
		db.close();
		db = null;
	}

	public int getVersion() throws SqlJetException {
		return db.getOptions().getUserVersion();
	}

	private void upgrade(int targetVersion) throws SqlJetException {
		if (targetVersion < 1) {
			return;
		}
		if (getVersion() < 1) {
			db.runWriteTransaction(new ISqlJetTransaction() {

				public Object run(SqlJetDb db) throws SqlJetException {
					db.getSchema().createTable(
							"create table items (article integer primary key, name text not null, description blob, "
									+ "room int, shelf int, borrowed_from text, borrowed_to text)");
					db.getSchema().createIndex("create index items_name on items (name asc)");
					db.getSchema().createIndex("create index items_location on items (room, shelf)");
					db.getOptions().setUserVersion(1);
					prefillItems();
					return null;
				}
			});
		}
		if (targetVersion < 2) {
			return;
		}
		if (getVersion() < 2) {
			// ...
		}
		if (targetVersion > 2) {
			throw new IllegalArgumentException("Unsupported version: " + targetVersion);
		}
	}

	private void prefillItems() throws SqlJetException {
		addItem(new InventoryItem(-1, "MacBook", "Unibody 2GHz", 7, 23, "Dmitry Stadnik", null));
		addItem(new InventoryItem(-1, "iPhone 3G", "8Mb", 7, 24, "Dmitry Stadnik", null));
		addItem(new InventoryItem(-1, "Cup", "Big & White", 3, 1, null, "MG"));
	}

	// Items

	public ISqlJetCursor getAllItems() throws SqlJetException {
		return db.getTable("items").open();
	}

	public InventoryItem getItem(long article) throws SqlJetException {
		// ...
	}

	public long addItem(final InventoryItem item) throws SqlJetException {
		// ...
	}

	public void updateItem(final long article, final Map<String, Object> values) throws SqlJetException {
		// ...
	}

	public void removeItem(final long article) throws SqlJetException {
		// ...
	}
}
}}}

Note how user_version option is used: its initial value is 0 and upgrade() method increments it along with changing the schema to be consistent with the version number.